- name: install docker and config
  hosts: node1
  gather_facts: no
  become: true
  tasks:
    - name: update all pkgs
      yum:
        name: "*"
        state: latest

    - name: Remove docker if installed from CentOS repo
      yum:
        name: "{{ item }}"
        state: removed
      loop:
        - docker
        - docker-client
        - docker-client-latest
        - docker-common
        - docker-latest
        - docker-latest-logrotate
        - docker-logrotate
        - docker-engine

    - name: Install yum utils
      yum: 
        name: yum-utils
        state: latest

    - name: Install Docker
      yum:
        name: docker
        state: latest

    - name: Install pip
      package:
        name: python3-pip
        state: present

    - name: Install docker sdk
      pip:
        name: docker
        state: present
        executable: pip3
        extra_args: "--ignore-installed"

    - name: Add user ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

- name: bridge networks config
  hosts: node1
  become: true
  gather_facts: no
  tasks:
    - name: Create docker networks bridge
      docker_network:
        name: all
        driver: bridge

- name: postgresql database config
  hosts: node1
  become: true
  gather_facts: no
  tasks:
    - name: Launch postgresql docker container
      docker_container:
        name: postgres_container
        image: postgres:latest
        state: started
        ports: 
          - "5432:5432"
        env:
          POSTGRES_USER: "postgres"
          POSTGRES_PASSWORD: "admin"
        volumes:
          - '/db-data:/var/lib/postgresql/data'
          - '/home/ec2-user/seryum-todo/todoserver/src/main/resources/init.sql:/docker-entrypoint-initdb.d/init.sql'
        networks:
          - name: all

    - name: Wait for TCP port to be available
      wait_for:
        host: "172.31.14.158"
        port: "5432"
        delay: 10
        timeout: 300

    # - name: Execute init.sql
    #   command: docker exec postgres_container psql -U postgres -f /docker-entrypoint-initdb.d/init.sql

- name: Launch pgadmin_container
  hosts: node1
  become: true
  gather_facts: no
  tasks:
    - name: Launch pgadmin docker container
      docker_container:
        name: pgadmin_container
        image: dpage/pgadmin4
        state: started
        ports: 
          - "5050:80"
        env:
          PGADMIN_DEFAULT_EMAIL: 'pgadmin4@pgadmin.org'
          PGADMIN_DEFAULT_PASSWORD: 'admin'
          PGADMIN_CONFIG_SERVER_MODE: 'False'
          PGADMIN_LISTEN_ADDRESS: '0.0.0.0'
          PGADMIN_LISTEN_PORT: '80'
        volumes: 
          - pgadmin:/root/.pgadmin
        networks:
          - name: all
        

- name: todo Server configuration
  hosts: node1
  become: true
  gather_facts: no
  vars: 
    container_path: /home/ec2-user/seryum-todo/todoserver
    container_name: todo_server
    image_name: seryum65/todo_server:latest
  tasks:
    - name: build todoserver container image
      docker_image:
        name: "{{ image_name }}"
        build:
          path: "{{ container_path }}"
        source: build
        state: present

    - name: Launch todoserver docker container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        ports:
          - "8000:8000"
        env: 
          SPRING_DATASOURCE_URL: jdbc:postgresql://172.31.14.158:5432/todo_db
        networks:
          - name: all


- name: todo app configuration
  hosts: node1
  become: true
  gather_facts: no
  vars: 
    container_path: /home/ec2-user/seryum-todo/todoapp
    container_name: todo_app
    image_name: seryum65/todo_app:latest
  tasks:

    - name: build todoapp container image
      docker_image:
        name: "{{ image_name }}"
        build:
          path: "{{ container_path }}"
        source: build
        state: present

    - name: Launch todoapp docker container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        ports:
          - "8081:8080"
        networks:
          - name: all
